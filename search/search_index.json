{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude81 Tello Suite","text":"<p>Danger</p> <p>This project is still a work in progress, so expect some bugs! If you encounter any, please open an issue or submit a PR with a fix.</p> <p>Tello Suite is a set of ROS2 packages that make the DJI Tello drone smarter and more capable. It uses plugins\u2014extra ROS2 packages with specific features\u2014to extend what the drone can do.</p> <p>Important packages in the suite include <code>tello_driver</code>, which connects to the drone, and <code>tello_bt</code>, which organizes how the drone behaves using a behavior tree. This setup makes the system more reliable by letting you control which plugins to use and handling unexpected issues better.</p> <p>The suite also includes a <code>Dockerfile</code> for easy setup without needing to install everything on your computer. For more details, check the Docker page.</p>"},{"location":"1.installation/","title":"\u2699\ufe0f Install","text":""},{"location":"1.installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>ROS2 Humble or later (only tested with Humble)</li> <li>Ubuntu 22.04</li> </ul>"},{"location":"1.installation/#dependencies","title":"Dependencies","text":"<ul> <li><code>tellopy</code> (must be installed from source)</li> <li><code>av</code></li> <li><code>pillow</code></li> <li><code>py-trees</code></li> <li><code>pygame</code></li> <li><code>mediapipe</code></li> </ul> <p>To simplify the setup, we provide a <code>bootstrap.sh</code> script that installs all dependencies. Run the following command:</p> <pre><code>./bootstrap.sh\n</code></pre> <p>Alternatively, if you prefer manual installation, ensure each of the dependencies above are installed.</p>"},{"location":"3.docker/","title":"\ud83d\udc0b Docker","text":"<p>A <code>Dockerfile</code> is provided for using this suite within Docker. This makes it easy to test and use without the need of installing any dependency on your computer nor even install ROS2. Additionally, a <code>docker-compose.yml</code> is also available to streamline the execution of the bringup and any other component that will come in the future.</p>"},{"location":"3.docker/#usage","title":"Usage","text":"<p>Important</p> <p>To make sure that you have GUI support, run the following command once <code>xhost +local:docker</code>.</p>"},{"location":"3.docker/#with-docker-compose-recommended","title":"With Docker Compose (Recommended)","text":"<p>Info</p> <p>Note that you will need to have <code>docker-compose</code> installed on your system. You can check if it is installed by running <code>docker-compose -v</code>. On ubuntu, you can install it using <code>sudo apt install docker-compose</code></p> <p>For an easy to use experience:</p> <ol> <li> <p>Go to the root of the project</p> </li> <li> <p>Run <code>docker-compose</code></p> </li> </ol> <pre><code>docker compose up\n</code></pre>"},{"location":"3.docker/#manual","title":"Manual","text":"<ol> <li> <p>Go to the root of the project</p> </li> <li> <p>Build the docker image</p> </li> </ol> <pre><code>docker build -t tello_suite .\n</code></pre> <ol> <li>Create container and run container with bringup (Recommended)</li> </ol> <pre><code>docker run --rm -it -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e DISPLAY=$DISPLAY --net=host tello_suite \\\n    ros2 launch tello_bringup system_launch.py\n</code></pre> <ol> <li>Create container and run container with bash</li> </ol> <pre><code>docker run --rm -it -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e DISPLAY=$DISPLAY --net=host tello_suite \\\n    bash\n</code></pre>"},{"location":"9.contribute/","title":"\ud83e\udd1d Contributing Guide","text":"<p>Thank you for considering contributing to our project! This guide will help you understand the contribution workflow and best practices to follow.</p>"},{"location":"9.contribute/#forking-the-repository","title":"Forking the Repository","text":"<p>To start contributing, first fork the repository:</p> <ol> <li>Visit the project repository on GitHub.</li> <li> <p>Click the Fork button in the top-right corner of the page. Refer to the example screenshot below:</p> <p></p> </li> </ol> <p>This will create a copy of the repository under your GitHub account.</p>"},{"location":"9.contribute/#cloning-the-repository","title":"Cloning the Repository","text":"<p>Once you've forked the repository, clone it to your local machine:</p> <pre><code># Replace 'username' with your GitHub username\ngit clone git@github.com:username/tello_suite.git\n</code></pre> <p>This will download the repository to your local system.</p>"},{"location":"9.contribute/#setting-up-a-new-branch","title":"Setting Up a New Branch","text":"<p>Before starting work on a new feature or bug fix, create a new branch to keep your changes organized. Use a descriptive branch name based on the work you\u2019re doing. For example, if you\u2019re adding a new plugin for interacting with a large language model (LLM), you might use a branch name like <code>feat/llm_plugin</code>.</p>"},{"location":"9.contribute/#workflow-example","title":"Workflow Example","text":"<p>Here\u2019s an example of a typical workflow:</p> <pre><code>cd tello_suite\n\ngit checkout -b feat/llm_plugin # Create and switch to a new branch\n\n# Make changes to your code\n\ngit add &lt;files&gt; # Stage your changes\ngit commit -m \"A short and descriptive commit message\" # Commit your changes\n\ngit push -u origin feat/llm_plugin # Push the branch to your fork and set up tracking\n</code></pre>"},{"location":"9.contribute/#tips-for-commit-messages","title":"Tips for Commit Messages","text":"<ul> <li>Use clear and concise messages.</li> <li>Begin with a verb in the imperative mood (e.g., \"Add,\" \"Fix,\" \"Update\").</li> <li>Keep the message short but descriptive.</li> </ul>"},{"location":"9.contribute/#submitting-your-changes","title":"Submitting Your Changes","text":"<p>After completing your changes and pushing them to your branch, create a pull request (PR):</p> <ol> <li>Go to your forked repository on GitHub.</li> <li>Navigate to the branch you worked on.</li> <li>Click the Pull Request button.</li> <li>Fill out the PR template (if provided) and add a clear description of your changes.</li> <li>Submit the PR for review.</li> </ol> <p>Your PR will be reviewed by maintainers, and you may be asked to make some changes before it is merged.</p> <p>Thank you for contributing! Your efforts make this project better for everyone.</p>"},{"location":"%F0%9F%93%A6%20Packages/plugin_server_base/","title":"Plugin Server Base","text":"<p>The <code>plugin_server_base</code> package serves as a bridge between the <code>tello_bt</code> framework and any custom plugins you create. It allows you to develop plugins independently, without requiring direct use of <code>tello_bt</code> or the <code>py-trees</code> library (which manages the behavior tree).</p> <p>Essentially, this package provides a ROS 2 node with a preconfigured ROS 2 service, enabling the behavior tree to trigger the execution (or \"ticking\") of your plugin.</p>"},{"location":"%F0%9F%93%A6%20Packages/plugin_server_base/#getting-started","title":"Getting Started","text":"<p>Using this package is straightforward and requires only two steps:</p> <ol> <li>Inherit from <code>plugin_server_base.PluginBase</code>: Use this as the base class for your node instead of <code>rclpy.Node</code>.</li> <li>Define the <code>tick(self)</code> method: Implement the <code>tick()</code> method in your node class. This method is essential; it will serve as the main loop for your plugin.</li> </ol> <p>Note</p> <p>The <code>tick()</code> method functions like a loop, either called by the behavior tree or, if in standalone mode, called at a default rate of 30 Hz.</p> <p>Example</p> <pre><code>from plugin_server_base.plugin_base import PluginBase\nfrom typing import Optional, Any\n\nclass MyNode(PluginBase):\n  def __init__(self, node_name: str):\n    super().__init__(node_name)\n\n    # ...\n\n  def tick(self, blackboard: Optional[dict[\"str\", Any]] = None):\n    # Implement here the logic\n    pass\n</code></pre>"},{"location":"%F0%9F%93%A6%20Packages/plugin_server_base/#parameters","title":"Parameters","text":"<p>The following parameters can be configured in the <code>plugin_server_base</code> package:</p> Parameter Name Default Value Description <code>tick_rate</code> 30 When in standalone mode, this parameter sets the rate (in Hz) at which the <code>tick()</code> method is called. <code>standalone</code> false If set to <code>true</code>, the plugin runs in standalone mode, meaning it operates without the behavior tree."},{"location":"%F0%9F%93%A6%20Packages/plugin_server_base/#for-developers","title":"For developers","text":"<p>We offer a simple plugin tester node, which is targeted for developers to test for example their behavior tree. The node name is <code>test_plugin_node</code> and it can be executed with:</p> <pre><code>ros2 run plugin_server_base test_plugin\n</code></pre> <p>Tip</p> <p>In case you want to test your plugin while in development, you can run it in standalone mode. In order to use the plugin in standalone mode, you can run the following command:</p> <pre><code>ros2 run plugin_server_base test_plugin --ros-args -p standalone:=true -p tick_rate:=30\n</code></pre>"},{"location":"%F0%9F%93%A6%20Packages/tello_app/","title":"Tello app","text":"<p>Note</p> <p>To be done!</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/","title":"Tello Behavior Tree","text":"<p>The <code>tello_bt</code> package implements a behavior tree (BT) for managing and executing plugins that define various behaviors for the Tello drone. This package uses the <code>py-trees</code> library to structure and run the behavior tree.</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#what-is-a-behavior-tree","title":"What is a Behavior Tree?","text":"<p>A behavior tree is a model that organizes defined behaviors into a tree structure, allowing them to be executed (or \"ticked\") in each iteration. While similar to a Finite State Machine (FSM), a behavior tree supports more complex scenarios with greater flexibility and simplicity.</p> <p>In <code>py_trees</code>, a behavior tree is built using nodes, decorators, and composites, each with specific functionality to control the flow of execution. For more information, visit py_trees documentation</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#common-nodes-used","title":"Common Nodes Used","text":""},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#action-nodes","title":"Action Nodes","text":"<p>Action nodes perform specific tasks when ticked. They execute actions and return a status (<code>SUCCESS</code>, <code>FAILURE</code>, or <code>RUNNING</code>).</p> <ul> <li><code>py_trees.behaviour.Behaviour</code>: The base class for any node you desire to create which does not require ROS.</li> <li><code>tello_bt.nodes.actions.Action</code>: The base class for any node you desire to create which relies on ROS.</li> <li><code>tello_bt.nodes.PluginClient</code>: A node which is used to execute a plugin.</li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#condition-nodes","title":"Condition Nodes","text":"<ul> <li><code>tello_bt.nodes.conditionals.CanRunPlugin</code>: A conditional node which can be used to check if a plugin is currently selected to run.</li> </ul> <p>Condition nodes check a condition and return <code>SUCCESS</code> if it is met, otherwise <code>FAILURE</code>.</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#common-decorators-used","title":"Common Decorators Used","text":"<p>Decorators modify the behavior of their child node based on specific rules or conditions.</p> <ul> <li><code>py_trees.decorators.Inverter</code>: Inverts the result of the child node (e.g., <code>SUCCESS</code> becomes <code>FAILURE</code>).</li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#common-composites-used","title":"Common Composites Used","text":"<p>Composite nodes are used to group multiple child nodes and control their execution flow.</p> <ul> <li> <p><code>py_trees.composites.Sequence</code>: Executes its children in order until one fails. Returns:</p> <ul> <li><code>SUCCESS</code> if all children succeed.</li> <li><code>FAILURE</code> if any child fails.</li> <li><code>RUNNING</code> if a child is still running.</li> </ul> </li> <li> <p><code>py_trees.composites.Selector</code>: Executes its children in order until one succeeds. Returns:</p> <ul> <li><code>SUCCESS</code> if any child succeeds.</li> <li><code>FAILURE</code> if all children fail.</li> <li><code>RUNNING</code> if a child is still running.</li> </ul> </li> <li> <p><code>py_trees.composites.Parallel</code>: Executes all children simultaneously. Returns:</p> <ul> <li><code>SUCCESS</code> if the required number of children succeed.</li> <li><code>FAILURE</code> if too many children fail or if required conditions are not met.</li> </ul> </li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#creating-a-behavior-tree","title":"Creating a Behavior Tree","text":"<p>By default, the behavior tree used is <code>tello_bt.bt.DefaultBT</code>. To create your own custom behavior tree, follow these steps:</p> <ol> <li>Create a New File: Add a new Python file in the <code>tello_bt.bt</code> directory and name it appropriately.</li> <li>Define the <code>bootstrap</code> Function:<ul> <li>Your file must define a function named <code>bootstrap(ros_node: rclpy.Node) -&gt; py_trees.behaviour.Behaviour</code>.<ul> <li>This function will be called by the BT ROS node to load your behavior tree.</li> <li>It should return the root of your tree.</li> </ul> </li> </ul> </li> <li>Update Parameters: Modify the parameter file to set the <code>bt_name</code> field to your file name (without the <code>.py</code> extension).</li> </ol>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#example","title":"Example","text":"<p>Example</p> <p>Python Code</p> tello_bt/bt/simple_bt.py<pre><code>import py_trees\nfrom rclpy.node import Node\n\ndef create_tree(): # Leaf nodes\n    success_node = py_trees.behaviours.Success(name=\"Always Succeed\")\n    failure_node = py_trees.behaviours.Failure(name=\"Always Fail\")\n\n    # Decorator\n    invert_failure = py_trees.decorators.Inverter(child=failure_node)\n\n    # Composite\n    sequence = py_trees.composites.Sequence(name=\"Simple Sequence\")\n    sequence.add_children([success_node, invert_failure])\n\n    return sequence\n\ndef bootstrap(ros_node: Node) -&gt; py_trees.behavior.Behaviour:\n    tree = create_tree()\n    return tree\n</code></pre> <p>Parameters File</p> config/params.yaml<pre><code>bt_server:\n    ros__parameters:\n        bt_name: simple_bt\n</code></pre>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#explaining-default-bt","title":"Explaining Default BT","text":"<p>Below is the graphical representation of the <code>DefaultBT</code> behavior tree.</p> <p>Note</p> <ul> <li>Reactive sequence is a sequence without memory, meaning that it will always start from the first child.</li> <li>Sequence has memory, meaning if one of it's children returns <code>RUNNING</code>, the next time it ticks, it will tick directly that child.</li> </ul> <p></p> <p>The structure and purpose of each part of the tree are as follows:</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#root-defaultbt","title":"Root: <code>DefaultBT</code>","text":"<ul> <li>Type: Sequence (no memory)</li> <li>Purpose: Ensures all the children (subsystems) are checked or executed in order.</li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#1-drone-connection-checker","title":"1. Drone Connection Checker","text":"<ul> <li>Type: Selector (no memory)</li> <li>Child: <code>IsDroneConnected</code></li> <li>Purpose: Verifies if the drone is connected.<ul> <li>If the connection is successful (<code>SUCCESS</code>), it moves to the next step.</li> <li>If the connection is not established (<code>FAILURE</code>), the tree stops ticking and the sequence fails.</li> </ul> </li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#2-battery-checker","title":"2. Battery Checker","text":"<ul> <li>Type: Selector (no memory)</li> <li>Children:<ul> <li><code>IsBatteryLow</code>: Checks if the battery is low. If it is, returns <code>SUCCESS</code>.</li> <li>Inverter (decorator) \u2192 <code>LandAction</code>: If the battery is not low, the decorator inverts the result of the <code>LandAction</code>.<ul> <li>The <code>LandAction</code> would normally return <code>FAILURE</code> (since landing is not required when the battery is okay), but the <code>Inverter</code> converts it to <code>SUCCESS</code>.</li> </ul> </li> </ul> </li> <li>Purpose: Ensures that if the battery is low, the drone lands safely. Otherwise, it allows the behavior tree to continue execution.</li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#3-remote-operator","title":"3. Remote Operator","text":"<ul> <li>Type: Action Node</li> <li>Name: <code>RemoteOperator</code></li> <li>Purpose: Checks keyboard input from <code>tello_control_station</code> and change selected plugin from blackboard to hand gestures plugin if selected.<ul> <li>Alawas returns <code>SUCCESS</code></li> </ul> </li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_bt/#4-plugins-selector","title":"4. Plugins Selector","text":"<ul> <li>Type: Selector (no memory)</li> <li> <p>Children:</p> <ol> <li>Hand Gestures Control (no memory):<ul> <li><code>CanRunPlugin</code>: Checks if the \"landmark_detector_node\" plugin is enabled and can run.</li> <li><code>PluginClient</code>: Executes the plugin responsible for hand gesture control, enabling drone interaction using visual gestures.</li> </ul> </li> </ol> </li> <li> <p>Purpose: Extends the drone's capabilities by enabling additional plugins, such as gesture control. If no plugin is active or available, this branch fails, but the rest of the tree can continue.</p> </li> </ul> <p>Example</p> tello_bt/bt/default_bt.py<pre><code># ...\nclass DefaultBT(py_trees.composites.Sequence):\n    # ...\n    def build_tree(self):\n        drone_connection = py_trees.composites.Selector(\n            \"DroneConnection\",\n            memory=False,\n            children=[\n                IsDroneConnected(\"IsDroneConnected\"),\n            ],\n        )\n\n        battery_checker = py_trees.composites.Selector(\n            \"BatteryChecker\",\n            memory=False,\n            children=[\n                IsBatteryLow(\"IsBatteryLow\", self.node),\n                py_trees.decorators.Inverter(\n                    \"LandActionInverter\", LandAction(\"LandAction\", self.node)\n                ),\n            ],\n        )\n\n        remote_operator = RemoteOperator(\"RemoteOperator\", self.node)\n\n        plugins = py_trees.composites.Selector(\n            \"Plugins\",\n            memory=False,\n            children=[\n                py_trees.composites.Sequence(\n                    \"HandGesturesControl\",\n                    memory=False,\n                    children=[\n                        CanRunPlugin(\"CanRunHandGestures\", \"landmark_detector_node\"),\n                        PluginClient(\n                            \"HandGesturesPlugin\", \"landmark_detector_node\", self.node\n                        ),\n                    ],\n                )\n            ],\n        )\n\n        self.add_children([drone_connection, battery_checker, remote_operator, plugins])\n\n\ndef bootstrap(ros_node: Node) -&gt; py_trees.behaviour.Behaviour:\n    return DefaultBT(ros_node)\n</code></pre>"},{"location":"%F0%9F%93%A6%20Packages/tello_driver/","title":"Tello Driver","text":"<p>The <code>tello_driver</code> package is the only one that interacts directly with the drone. It is built on top of the Python library <code>tellopy</code>, which implements the low-level protocol for controlling the Tello drone. This protocol was reverse-engineered by the tellopilots community.</p> <p>With this package, you can send commands to the drone, such as takeoff, landing, and more. For a full list of available commands, refer to the topics section.</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#dependencies","title":"Dependencies","text":"<ul> <li><code>tellopy</code>: This library must be installed from source to ensure you are using the latest version.</li> <li><code>tello_msgs</code>: A required package for message definitions.</li> </ul>"},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#ros-related","title":"\ud83e\udd16 ROS Related","text":""},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#subscribed-topics","title":"\ud83d\udce5 Subscribed Topics","text":"Topic Name Message Type Description <code>/camera/exposure</code> <code>std_msgs/msg/Int32</code> Sets camera exposure. (Valid values: 0, 1, 2) <code>/cmd_vel</code> <code>geometry_msgs/msg/Twist</code> Command velocity for drone movement. <code>/flip</code> <code>tello_msgs/msg/FlipControl</code> Controls flips of the drone. <code>/land</code> <code>std_msgs/msg/Empty</code> Triggers drone landing. <code>/takeoff</code> <code>std_msgs/msg/Empty</code> Triggers drone takeoff. <code>/palm_land</code> <code>std_msgs/msg/Empty</code> Activates palm landing feature. <code>/set_att_limit</code> <code>std_msgs/msg/Int32</code> Sets altitude limit for the drone. (in meters) <code>/throw_and_go</code> <code>std_msgs/msg/Empty</code> Activates throw and go feature. <code>/toggle_fast_mode</code> <code>std_msgs/msg/Empty</code> Toggles the drone's fast mode."},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#published-topics","title":"\ud83d\udce4 Published Topics","text":"Topic Name Message Type Description <code>/camera/image_raw</code> <code>sensor_msgs/msg/Image</code> Camera images from the drone. <code>/flight_data</code> <code>tello_msgs/msg/FlightStats</code> Flight data and statistics. <code>/imu</code> <code>sensor_msgs/msg/Imu</code> IMU data of the drone. <code>/odom</code> <code>nav_msgs/msg/Odometry</code> Odometry information. (It is very inacurate. Should be avoided) <code>/battery_state</code> <code>sensor_msgs/BatteryState</code> Battery State information. (Percentage is from 0-100%)"},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#ros-parameters","title":"\ud83d\udd27 ROS Parameters","text":"<p>Here are the configurable parameters for the <code>tello_ros_wrapper</code>:</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#topics","title":"Topics","text":"Parameter Name Default Value Description <code>image_topic_name</code> 'camera/image_raw' Topic name for camera images. <code>flight_data_topic_name</code> 'flight_data' Topic name for flight data. <code>velocity_command_topic_name</code> 'cmd_vel' Topic name for velocity commands. <code>land_topic_name</code> 'land' Topic name for landing command. <code>takeoff_topic_name</code> 'takeoff' Topic name for takeoff command. <code>flip_control_topic_name</code> 'flip' Topic name for flip control. <code>odom_topic_name</code> 'odom' Topic name for odometry data. <code>imu_topic_name</code> 'imu' Topic name for IMU data. <code>toggle_fast_mode_topic_name</code> 'toggle_fast_mode' Topic name for toggling fast mode. <code>camera_exposure_topic_name</code> 'camera/exposure' Topic name for camera exposure control."},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#frame-ids","title":"Frame IDs","text":"Parameter Name Default Value Description <code>imu_frame_id</code> 'imu' Frame ID for IMU data. <code>odom_frame_id</code> 'odom' Frame ID for odometry data. <code>drone_frame_id</code> 'tello' Frame ID for the drone."},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#wifi-setup","title":"Wifi Setup","text":"Parameter Name Default Value Description <code>auto_wifi_connection</code> false Automatically connect to Tello WiFi. <code>tello_ssid</code> SSID for Tello WiFi connection. <code>tello_pw</code> Password for Tello WiFi."},{"location":"%F0%9F%93%A6%20Packages/tello_driver/#settings","title":"Settings","text":"Parameter Name Default Value Description <code>alt_limit</code> 30 Altitude limit in meters. <code>fast_mode</code> false Enables fast mode for the drone. <code>video_mode</code> '4:3' Sets video mode (options: '4:3', '16:9'). <code>camera_exposure</code> 0 Camera exposure level (0, 1, 2)."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/","title":"Tello Messages","text":"<p>The <code>tello_msgs</code> package defines custom messages and services for communication with the DJI Tello drone. These definitions facilitate control commands and telemetry data exchange, enabling robust interaction with the drone.</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#message-types","title":"Message Types","text":""},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#flightstatsmsg","title":"<code>FlightStats.msg</code>","text":"<p>This message contains detailed telemetry data and status information from the drone, grouped into categories:</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#battery-data","title":"Battery Data","text":"Field Name Type Description <code>battery_low</code> int16 Indicates if the battery is low. <code>battery_lower</code> int16 Indicates if the battery is critically low. <code>battery_percentage</code> int16 Current battery level as a percentage. <code>drone_battery_left</code> int16 Remaining battery in the drone. <code>drone_fly_time_left</code> int16 Estimated remaining flight time based on battery."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#states","title":"States","text":"Field Name Type Description <code>battery_state</code> int16 Current battery state. <code>camera_state</code> int16 Status of the camera. <code>electrical_machinery_state</code> int16 Status of the drone\u2019s motors. <code>down_visual_state</code> int16 Status of the downward visual positioning system. <code>gravity_state</code> int16 Status of gravity sensors. <code>imu_calibration_state</code> int16 Status of IMU calibration. <code>imu_state</code> int16 Status of the IMU. <code>power_state</code> int16 Status of the power system. <code>pressure_state</code> int16 Status of pressure sensors. <code>wind_state</code> int16 Status of wind-related adjustments."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#stats","title":"Stats","text":"Field Name Type Description <code>drone_hover</code> int16 Indicates if the drone is hovering. <code>em_open</code> int16 Emergency state (open). <code>em_sky</code> int16 Emergency state (sky-related). <code>em_ground</code> int16 Emergency state (ground-related). <code>factory_mode</code> int16 Indicates if the drone is in factory mode. <code>fly_mode</code> int16 Current flight mode. <code>fly_time</code> int16 Total flight time in seconds. <code>front_in</code> int16 Status of front sensors (in proximity). <code>front_lsc</code> int16 Front LSC sensor state. <code>front_out</code> int16 Status of front sensors (out of proximity)."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#sensors","title":"Sensors","text":"Field Name Type Description <code>fly_speed</code> int16 Current flight speed. <code>east_speed</code> int16 Horizontal speed towards the east. <code>ground_speed</code> int16 Speed relative to the ground. <code>height</code> int16 Current height in meters. <code>light_strength</code> int16 Strength of detected light. <code>north_speed</code> int16 Horizontal speed towards the north. <code>temperature_high</code> int16 Current temperature of the drone."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#other","title":"Other","text":"Field Name Type Description <code>outage_recording</code> int16 Indicates if there are recording outages. <code>smart_video_exit_mode</code> int16 Status of the smart video exit mode. <code>throw_fly_timer</code> int16 Timer for throw-and-fly mode."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#wifi","title":"WiFi","text":"Field Name Type Description <code>wifi_disturb</code> int16 Level of WiFi disturbance. <code>wifi_strength</code> int16 Current WiFi signal strength."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#flipcontrolmsg","title":"<code>FlipControl.msg</code>","text":"<p>This message is used to control the drone's flips. It defines boolean fields for all possible flip directions:</p> Field Name Type Description <code>flip_forward</code> bool Perform a forward flip. <code>flip_backward</code> bool Perform a backward flip. <code>flip_right</code> bool Perform a right flip. <code>flip_left</code> bool Perform a left flip. <code>flip_forward_left</code> bool Perform a forward-left diagonal flip. <code>flip_forward_right</code> bool Perform a forward-right diagonal flip. <code>flip_back_left</code> bool Perform a backward-left diagonal flip. <code>flip_back_right</code> bool Perform a backward-right diagonal flip."},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#services","title":"Services","text":"<p>The <code>tello_msgs</code> package also includes services for controlling the drone. These services will be documented in detail as they are implemented.</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_msgs/#usage","title":"Usage","text":"<p>This package is essential for ROS2 nodes interacting with the Tello drone. It defines all necessary message and service formats for controlling the drone and processing its telemetry.</p> <p>For more information, refer to the Tello Driver documentation.</p>"},{"location":"%F0%9F%93%A6%20Packages/tello_nav/","title":"Tello nav","text":"<p>Note</p> <p>To be done!</p>"},{"location":"%F0%9F%A7%A9%20Plugins/","title":"About Plugins","text":"<p>What is a plugin, you may ask? Simply put, a plugin is a ROS2 package designed to add new functionality that doesn't need to run constantly, unlike the <code>tello_driver</code>. Plugins are optional components that can be dynamically controlled by the behavior tree (<code>tello_bt</code>), enabling flexible and modular task execution.</p> <p>The core idea of plugins is their ability to work together seamlessly, allowing for different types of functionality to be combined to achieve complex tasks. For example: - A default plugin shipped with the system is a hand gesture detector, which interprets gestures and converts them into drone commands. - Another example could be a person follower plugin, where the drone autonomously tracks and follows a person.</p> <p>In the future, the selection of which plugin to run can be configured using a behavior tree and a configuration file, making the system even more adaptable.</p>"},{"location":"%F0%9F%A7%A9%20Plugins/#how-to-create-a-plugin","title":"How To Create a Plugin","text":"<p>As mentioned, a plugin is just a ROS2 package. You can create a new package under the <code>plugins</code> folder or import your own pre-existing package.</p> <p>When developing your plugin, you need to use the plugin_server_base package. This package provides a base class (<code>PluginBase</code>) for implementing plugins. Your node should look like this:</p> <p>Danger</p> <p>You must implement the <code>tick</code> function. You can think of it as an inifite while loop. This function should not contain any inifinte loop inside!!</p> <p>Example</p> <pre><code>from plugin_server_base.plugin_base import PluginBase\nfrom typing import Optional, Any\n\nclass MyNode(PluginBase):\n    def __init__(self, node_name: str):\n        super().__init__(node_name)\n\n        # Initialize your plugin here\n\n    def tick(self, blackboard: Optional[dict[str, Any]] = None):\n        # Implement the main logic of your plugin here\n        pass\n</code></pre> <p>For a more detailed explanation of plugin_server_base, refer to its documentation.</p>"},{"location":"%F0%9F%A7%A9%20Plugins/#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>Does my plugin need to have all its nodes based on <code>PluginBase</code>?</p> <p>No. If you have a main node that handles input and produces output, and your other nodes depend on its data, you do not need to base all nodes on <code>PluginBase</code>. Only the node interacting with the behavior tree (<code>tello_bt</code>) requires this.</p> <p>When does my node strictly require the use of <code>PluginBase</code>?</p> <p>If you want your node to be controlled by the behavior tree (<code>tello_bt</code>), you must base it on <code>PluginBase</code>. This ensures compatibility and control integration.</p>"},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/","title":"Hand Gestures Plugin","text":"<p>This plugin aims to detect hand landmarks and interpret the landmarks to gestures. These gestures can then be used to control a robot movement for instance.</p> <p>In addition, the plugin is meant to be used in conjunction with a behaviour tree like the tello_bt. Nevertheless, it can be used in a standalone mode.</p>"},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#dependencies","title":"\ud83e\udde9 Dependencies","text":"<ul> <li><code>tello_plugin_utils</code>.</li> </ul>"},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#standalone-usage","title":"\ud83d\ude80 Standalone Usage","text":"<p>Note</p> <p>Each command needs to be executed in 2 different terminals and you must source the <code>install/setup.bash</code> which was created in the section above.</p> <ol> <li>Launch the detector node in standalone mode</li> </ol> <pre><code> ros2 run hand_gestures landmark_detector_node --ros-args -p standalone:=true\n</code></pre> <ol> <li>Launch the annotator node in standalone mode</li> </ol> <pre><code> ros2 run hand_gestures landmark_annotator_node --ros-args -p standalone:=true\n</code></pre>"},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The main idea is to split work into multiple nodes. We first have a <code>detector</code> node, which only goal is to detect the hand landmarks and publish them to a topic <code>/hand/landmarks</code>.</p> <p>In addition, we have another node <code>annotator</code> which receives the same images which are fed into the detector node and also the landmarks produced by the detector node. Then, it will draw the detected landmarks into the image and publish the annotated image to the topic <code>/hand/annotated/image</code>.</p> <p>To conclude the hand gesture package, we have the <code>sign_classifier</code> node. It's goal is to receive the hand landmarks and interpret those into hand gestures.</p> <p>In order to support multiple robots, it is needed to create an extra node which will be depended to the robot itself. This node takes in the interpreted gestures and then translates them into velocity commands and others, like stand up, take-off, etc.</p>"},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#ros-related","title":"\ud83e\udd16 ROS Related","text":""},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#subscribed-topics","title":"\ud83d\udce5 Subscribed Topics","text":""},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#landmark-detector-node","title":"\ud83c\udf10 Landmark Detector Node","text":"Topic Name Message Type Description <code>/camera/image_raw</code> sensor_msgs/Image) Input image for hand detection."},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#landmark-annotator-node","title":"\ud83c\udf10 Landmark Annotator Node","text":"Topic Name Message Type Description <code>/camera/image_raw</code> sensor_msgs/Image) Input image use for hand detection. <code>/hand/landmarks</code> hand_gestures_msgs/Landmakrs) Landmarks detected."},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#published-topics","title":"\ud83d\udce4 Published Topics","text":""},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#landmark-detector-node_1","title":"\ud83c\udf10 Landmark Detector Node","text":"Topic Name Message Type Description <code>/hand/landmarks</code> hand_gestures_msgs/Landmakrs) Output landmarks topic for detected hands."},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#landmark-annotator-node_1","title":"\ud83c\udf10 Landmark Annotator Node","text":"Topic Name Message Type Description <code>/hand/annotated/image</code> sensor_msgs/Image) Annotated image with landmarks for detected hands."},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#parameters","title":"\u2699\ufe0f Parameters","text":""},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#landmark-detector-node_2","title":"\ud83c\udf10 Landmark Detector Node","text":"Parameter Name Description Default <code>img_input_topic</code> Input image topic name. <code>/camera/image_raw</code> <code>landmarks_topic</code> Detected landmarks on image. <code>hand/landmarks</code> <code>num_hands</code> Maximum number of hands to detect. 2 <code>min_detection_confidence</code> Minimum confidence to detect a hand. 0.5 <code>min_tracking_confidence</code> Minimum confidence to track a hand. 0.5"},{"location":"%F0%9F%A7%A9%20Plugins/hand_gestures/#landmark-annotator-node_2","title":"\ud83c\udf10 Landmark Annotator Node","text":"Parameter Name Description Default <code>img_input_topic</code> Input image topic name. <code>/camera/image_raw</code> <code>annotated_img_topic</code> Annotated image with landmarks topic name. <code>/camera/image_raw</code> <code>landmarks_topic</code> Detected landmarks on image. <code>hand/landmarks</code>"}]}